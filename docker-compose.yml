networks:
  soc-net:
    driver: bridge

volumes:
  cassandra_data:
  es_data:
  mysql_data:
  redis_data:
  minio_data:

services:
  #--------------------------------------------------
  # BACKEND DATABASES & STORAGE
  #--------------------------------------------------
  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    networks:
      - soc-net
    volumes:
      - cassandra_data:/var/lib/cassandra
    environment:
      - CASSANDRA_USER=${CASSANDRA_USER}
      - CASSANDRA_PASSWORD=${CASSANDRA_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -u ${CASSANDRA_USER} -p ${CASSANDRA_PASSWORD} -e 'describe keyspaces'"]
      interval: 15s
      timeout: 10s
      retries: 10

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: elasticsearch
    networks:
      - soc-net
    volumes:
      - es_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=${ELASTIC_DISCOVERY_TYPE}
      - "ES_JAVA_OPTS=-Xms${ELASTIC_MEM_LIMIT} -Xmx${ELASTIC_MEM_LIMIT}"
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow"]
      interval: 10s
      timeout: 10s
      retries: 10

  misp-mysql:
    image: mysql:5.7
    container_name: misp-mysql
    networks:
      - soc-net
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  misp-redis:
    image: redis:7
    container_name: misp-redis
    networks:
      - soc-net
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9003"
    networks:
      - soc-net
    ports:
      - "9002:9000" # S3 API
      - "9003:9003" # Console UI
    volumes:
      - minio_data:/data
    env_file: .env
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  #--------------------------------------------------
  # CORE APPLICATIONS
  #--------------------------------------------------
  thehive:
    image: strangebee/thehive:5.3
    container_name: thehive
    networks:
      - soc-net
    ports:
      - "9000:9000"
    volumes:
      - ./thehive/application.conf:/etc/thehive/application.conf
    env_file: .env
    depends_on:
      cassandra:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      minio:
        condition: service_healthy
      cortex:
        condition: service_started # No healthcheck on cortex, start dependency is enough

  cortex:
    image: thehiveproject/cortex:3.2.1
    container_name: cortex
    networks:
      - soc-net
    ports:
      - "9001:9001"
    volumes:
      - ./cortex/application.conf:/etc/cortex/application.conf
    env_file: .env
    depends_on:
      elasticsearch:
        condition: service_healthy

  misp:
    image: coolacid/misp-docker:core-latest
    container_name: misp
    networks:
      - soc-net
    ports:
      - "8443:443"
    env_file: .env
    environment:
      - MYSQL_HOST=misp-mysql
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - REDIS_HOST=misp-redis
      - MISP_ADMIN_EMAIL=${THEHIVE_ADMIN_EMAIL} # Reuse for simplicity
      - MISP_ADMIN_PASSPHRASE=${THEHIVE_ADMIN_PASSWORD}
    depends_on:
      misp-mysql:
        condition: service_healthy
      misp-redis:
        condition: service_healthy

  #--------------------------------------------------
  # INITIALIZATION CONTAINER
  #--------------------------------------------------
  soc-initializer:
    image: alpine/curl:3.14
    container_name: soc-initializer
    networks:
      - soc-net
    volumes:
      - ./minio/scripts:/minio_scripts
      - ./misp:/misp_scripts
      - ./scripts:/scripts
    env_file: .env
    command: >
      sh -c "
        apk add --no-cache bash minio-client;
        chmod +x /minio_scripts/init_minio.sh /misp_scripts/init_misp.sh /scripts/init_cortex_analyzers.sh;
        echo '--- Running MinIO Init Script ---';
        /minio_scripts/init_minio.sh;
        echo '--- Running MISP Init Script ---';
        /misp_scripts/init_misp.sh;
        echo '--- Running Cortex Init Script ---';
        /scripts/init_cortex_analyzers.sh;
        echo '--- All Init Scripts Completed ---';
      "
    depends_on:
      minio:
        condition: service_healthy
      misp:
        condition: service_started # Misp script has its own wait loop
      cortex:
        condition: service_started # Cortex script has its own wait loop
